security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        # Source des utilisateurs (par exemple, une entité de base de données)
        app_user_provider:
            entity:
                class: App\Entity\User
                property: email # Le champ de l'entité utilisé pour l'authentification

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        # Configurer le pare-feu pour utiliser le formulaire de connexion
        main:
            lazy: true
            form_login:
                login_path: app_login # La route vers laquelle rediriger pour la connexion
                check_path: app_login # La route qui valide les informations de connexion
                default_target_path: / # La route vers laquelle rediriger après la connexion réussie
                enable_csrf: true
            logout:
                path: app_logout
                # where to redirect after logout
                # target: app_any_route

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/, roles: PUBLIC_ACCESS }
        - { path: ^/login, roles: PUBLIC_ACCESS },
        - { path: ^/register, roles: PUBLIC_ACCESS }
        - { path: ^/verify/email, roles: PUBLIC_ACCESS }
        - { path: ^/pdf/generate, roles: ROLE_USER }
        - { path: ^/pdf/download, roles: ROLE_USER }
        - { path: ^/history, roles: ROLE_USER }
        - { path: ^/subscription/change, roles: ROLE_USER }
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
